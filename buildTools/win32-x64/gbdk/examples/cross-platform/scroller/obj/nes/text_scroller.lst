                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module text_scroller
                                      6 	.optsdcc -mmos6502
                                      7 	
                                      8 ;; Ordering of segments for the linker.
                                      9 	.area _ZP      (PAG)
                                     10 	.area _OSEG    (PAG, OVR)
                                     11 	.area _HOME
                                     12 	.area _GSINIT
                                     13 	.area _GSFINAL
                                     14 	.area _CODE
                                     15 	.area _XINIT
                                     16 	.area _DATA
                                     17 	.area _DATA
                                     18 	.area _BSS
                                     19 ;--------------------------------------------------------
                                     20 ; Public variables in this module
                                     21 ;--------------------------------------------------------
                                     22 	.globl _scroller_text
                                     23 	.globl _scanline_offsets_tbl
                                     24 	.globl _main
                                     25 	.globl _scanline_isr
                                     26 	.globl _printf
                                     27 	.globl _font_set
                                     28 	.globl _font_load
                                     29 	.globl _font_init
                                     30 	.globl _fill_bkg_rect
                                     31 	.globl _get_bkg_xy_addr
                                     32 	.globl _set_vram_byte
                                     33 	.globl _display_off
                                     34 	.globl _display_on
                                     35 	.globl _vsync
                                     36 	.globl _add_LCD
                                     37 	.globl _scroller_next_char
                                     38 	.globl _scroller_x
                                     39 	.globl _scanline_offsets
                                     40 	.globl _limit
                                     41 	.globl _base
                                     42 	.globl _scroller_vram_addr
                                     43 	.globl _OAMDMA
                                     44 	.globl _PPUDATA
                                     45 	.globl _PPUADDR
                                     46 	.globl _PPUSCROLL
                                     47 	.globl _OAMDATA
                                     48 	.globl _OAMADDR
                                     49 	.globl _PPUSTATUS
                                     50 	.globl _PPUMASK
                                     51 	.globl _PPUCTRL
                                     52 ;--------------------------------------------------------
                                     53 ; ZP ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _ZP      (PAG)
                         00000000    56 Ltext_scroller.main$sloc0$0_1$0==.
    00000000                         57 _main_sloc0_1_0:
    00000000                         58 	.ds 2
                                     59 ;--------------------------------------------------------
                                     60 ; overlayable items in ram
                                     61 ;--------------------------------------------------------
                                     62 ;--------------------------------------------------------
                                     63 ; uninitialized external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area _BSS
                         00002000    66 G$PPUCTRL$0_0$0 == 0x2000
                         00002000    67 _PPUCTRL	=	0x2000
                         00002001    68 G$PPUMASK$0_0$0 == 0x2001
                         00002001    69 _PPUMASK	=	0x2001
                         00002002    70 G$PPUSTATUS$0_0$0 == 0x2002
                         00002002    71 _PPUSTATUS	=	0x2002
                         00002003    72 G$OAMADDR$0_0$0 == 0x2003
                         00002003    73 _OAMADDR	=	0x2003
                         00002004    74 G$OAMDATA$0_0$0 == 0x2004
                         00002004    75 _OAMDATA	=	0x2004
                         00002005    76 G$PPUSCROLL$0_0$0 == 0x2005
                         00002005    77 _PPUSCROLL	=	0x2005
                         00002006    78 G$PPUADDR$0_0$0 == 0x2006
                         00002006    79 _PPUADDR	=	0x2006
                         00002007    80 G$PPUDATA$0_0$0 == 0x2007
                         00002007    81 _PPUDATA	=	0x2007
                         00004014    82 G$OAMDMA$0_0$0 == 0x4014
                         00004014    83 _OAMDMA	=	0x4014
                         00000000    84 G$scroller_vram_addr$0_0$0==.
    00000000                         85 _scroller_vram_addr::
    00000000                         86 	.ds 2
                         00000002    87 G$base$0_0$0==.
    00000002                         88 _base::
    00000002                         89 	.ds 2
                         00000004    90 G$limit$0_0$0==.
    00000004                         91 _limit::
    00000004                         92 	.ds 2
                                     93 ;--------------------------------------------------------
                                     94 ; absolute external ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area _DABS    (ABS)
                                     97 ;--------------------------------------------------------
                                     98 ; initialized external ram data
                                     99 ;--------------------------------------------------------
                                    100 	.area _DATA
                         00000000   101 G$scanline_offsets$0_0$0==.
    00000000                        102 _scanline_offsets::
    00000000                        103 	.ds 2
                         00000002   104 G$scroller_x$0_0$0==.
    00000002                        105 _scroller_x::
    00000002                        106 	.ds 1
                         00000003   107 G$scroller_next_char$0_0$0==.
    00000003                        108 _scroller_next_char::
    00000003                        109 	.ds 2
                                    110 ;--------------------------------------------------------
                                    111 ; global & static initialisations
                                    112 ;--------------------------------------------------------
                                    113 	.area _HOME
                                    114 	.area _GSINIT
                                    115 	.area _GSFINAL
                                    116 	.area _GSINIT
                                    117 ;--------------------------------------------------------
                                    118 ; Home
                                    119 ;--------------------------------------------------------
                                    120 	.area _HOME
                                    121 	.area _HOME
                                    122 ;--------------------------------------------------------
                                    123 ; code
                                    124 ;--------------------------------------------------------
                                    125 	.area _CODE
                                    126 ;------------------------------------------------------------
                                    127 ;Allocation info for local variables in function 'scanline_isr'
                                    128 ;------------------------------------------------------------
                                    129 ;__300000006               Allocated to registers 
                                    130 ;__300000007               Allocated to registers 
                                    131 ;x                         Allocated to registers 
                                    132 ;y                         Allocated to registers 
                                    133 ;__300000009               Allocated to registers 
                                    134 ;__300000010               Allocated to registers 
                                    135 ;x                         Allocated to registers 
                                    136 ;y                         Allocated to registers 
                                    137 ;__300000012               Allocated to registers 
                                    138 ;__300000013               Allocated to registers 
                                    139 ;x                         Allocated to registers 
                                    140 ;y                         Allocated to registers 
                                    141 ;------------------------------------------------------------
                         00000000   142 	G$scanline_isr$0$0 ==.
                         00000000   143 	C$text_scroller.c$16$0_0$101 ==.
                                    144 ;	src/text_scroller.c: 16: void scanline_isr(void) {
                                    145 ;	-----------------------------------------
                                    146 ;	 function scanline_isr
                                    147 ;	-----------------------------------------
                                    148 ;	Register assignment is optimal.
                                    149 ;	Stack space usage: 0 bytes.
    00000000                        150 _scanline_isr:
                         00000000   151 	C$text_scroller.c$18$1_0$101 ==.
                                    152 ;	src/text_scroller.c: 18: switch (_lcd_scanline) {
    00000000 ADr00r00         [ 4]  153 	lda	__lcd_scanline
    00000003 F0 11            [ 4]  154 	beq	00101$
    00000005 ADr00r00         [ 4]  155 	lda	__lcd_scanline
    00000008 C9 78            [ 2]  156 	cmp	#0x78
    0000000A F0 1A            [ 4]  157 	beq	00102$
    0000000C ADr00r00         [ 4]  158 	lda	__lcd_scanline
    0000000F C9 80            [ 2]  159 	cmp	#0x80
    00000011 F0 26            [ 4]  160 	beq	00103$
    00000013 4Cr48r00         [ 3]  161 	jmp	00108$
                         00000016   162 	C$text_scroller.c$19$2_0$102 ==.
                                    163 ;	src/text_scroller.c: 19: case 0: 
    00000016                        164 00101$:
                                    165 ;	c:\geeky\gbdk-2020\build\gbdk\include\nes\nes.h: 939: bkg_scroll_x = x, bkg_scroll_y = y;
    00000016 A2 00            [ 2]  166 	ldx	#0x00
    00000018 8Er00r00         [ 4]  167 	stx	_bkg_scroll_x
    0000001B 8Er00r00         [ 4]  168 	stx	_bkg_scroll_y
                         0000001E   169 	C$text_scroller.c$21$2_0$102 ==.
                                    170 ;	src/text_scroller.c: 21: _lcd_scanline = SCROLL_POS_PIX_START + 1;
    0000001E A2 78            [ 2]  171 	ldx	#0x78
    00000020 8Er00r00         [ 4]  172 	stx	__lcd_scanline
                         00000023   173 	C$text_scroller.c$22$2_0$102 ==.
                                    174 ;	src/text_scroller.c: 22: break;
    00000023 4Cr48r00         [ 3]  175 	jmp	00108$
                         00000026   176 	C$text_scroller.c$23$2_0$102 ==.
                                    177 ;	src/text_scroller.c: 23: case SCROLL_POS_PIX_START + 1:
    00000026                        178 00102$:
                                    179 ;	src/text_scroller.c: 24: move_bkg(scroller_x, SCROLL_POS_PIX_START + 1);
    00000026 ADr02r00         [ 4]  180 	lda	_scroller_x
    00000029 8Dr00r00         [ 4]  181 	sta	_bkg_scroll_x
                                    182 ;	c:\geeky\gbdk-2020\build\gbdk\include\nes\nes.h: 939: bkg_scroll_x = x, bkg_scroll_y = y;
    0000002C A2 78            [ 2]  183 	ldx	#0x78
    0000002E 8Er00r00         [ 4]  184 	stx	_bkg_scroll_y
                         00000031   185 	C$text_scroller.c$25$2_0$102 ==.
                                    186 ;	src/text_scroller.c: 25: _lcd_scanline = SCROLL_POS_PIX_END + 1;
    00000031 A2 80            [ 2]  187 	ldx	#0x80
    00000033 8Er00r00         [ 4]  188 	stx	__lcd_scanline
                         00000036   189 	C$text_scroller.c$26$2_0$102 ==.
                                    190 ;	src/text_scroller.c: 26: break;
    00000036 4Cr48r00         [ 3]  191 	jmp	00108$
                         00000039   192 	C$text_scroller.c$27$2_0$102 ==.
                                    193 ;	src/text_scroller.c: 27: case SCROLL_POS_PIX_END + 1:
    00000039                        194 00103$:
                                    195 ;	c:\geeky\gbdk-2020\build\gbdk\include\nes\nes.h: 939: bkg_scroll_x = x, bkg_scroll_y = y;
    00000039 A2 00            [ 2]  196 	ldx	#0x00
    0000003B 8Er00r00         [ 4]  197 	stx	_bkg_scroll_x
    0000003E A2 80            [ 2]  198 	ldx	#0x80
    00000040 8Er00r00         [ 4]  199 	stx	_bkg_scroll_y
                         00000043   200 	C$text_scroller.c$29$2_0$102 ==.
                                    201 ;	src/text_scroller.c: 29: _lcd_scanline = 0;
    00000043 A2 00            [ 2]  202 	ldx	#0x00
    00000045 8Er00r00         [ 4]  203 	stx	__lcd_scanline
                         00000048   204 	C$text_scroller.c$31$1_0$101 ==.
                                    205 ;	src/text_scroller.c: 31: }
    00000048                        206 00108$:
                         00000048   207 	C$text_scroller.c$55$1_0$101 ==.
                                    208 ;	src/text_scroller.c: 55: }
                         00000048   209 	C$text_scroller.c$55$1_0$101 ==.
                         00000048   210 	XG$scanline_isr$0$0 ==.
    00000048 60               [ 6]  211 	rts
                                    212 ;------------------------------------------------------------
                                    213 ;Allocation info for local variables in function 'main'
                                    214 ;------------------------------------------------------------
                                    215 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    216 ;__300000015               Allocated to registers 
                                    217 ;__300000016               Allocated to registers 
                                    218 ;x                         Allocated to registers 
                                    219 ;y                         Allocated to registers 
                                    220 ;------------------------------------------------------------
                         00000049   221 	G$main$0$0 ==.
                         00000049   222 	C$text_scroller.c$66$1_0$113 ==.
                                    223 ;	src/text_scroller.c: 66: void main(void) {
                                    224 ;	-----------------------------------------
                                    225 ;	 function main
                                    226 ;	-----------------------------------------
                                    227 ;	Register assignment is optimal.
                                    228 ;	Stack space usage: 0 bytes.
    00000049                        229 _main:
                         00000049   230 	C$text_scroller.c$67$1_0$113 ==.
                                    231 ;	src/text_scroller.c: 67: DISPLAY_OFF;
    00000049 20r00r00         [ 6]  232 	jsr	_display_off
                         0000004C   233 	C$text_scroller.c$69$1_0$113 ==.
                                    234 ;	src/text_scroller.c: 69: font_init();
    0000004C 20r00r00         [ 6]  235 	jsr	_font_init
                         0000004F   236 	C$text_scroller.c$70$1_0$113 ==.
                                    237 ;	src/text_scroller.c: 70: font_set(font_load(font_ibm));
    0000004F A2s00            [ 2]  238 	ldx	#>_font_ibm
    00000051 A9r00            [ 2]  239 	lda	#_font_ibm
    00000053 20r00r00         [ 6]  240 	jsr	_font_load
    00000056 20r00r00         [ 6]  241 	jsr	_font_set
                         00000059   242 	C$text_scroller.c$72$1_0$113 ==.
                                    243 ;	src/text_scroller.c: 72: fill_bkg_rect(0, 0, DEVICE_SCREEN_WIDTH, DEVICE_SCREEN_HEIGHT, '*' - ' ');
    00000059 A2 20            [ 2]  244 	ldx	#0x20
    0000005B 8Er00r00         [ 4]  245 	stx	_fill_bkg_rect_PARM_3
    0000005E A2 1E            [ 2]  246 	ldx	#0x1e
    00000060 8Er00r00         [ 4]  247 	stx	_fill_bkg_rect_PARM_4
    00000063 A2 0A            [ 2]  248 	ldx	#0x0a
    00000065 8Er00r00         [ 4]  249 	stx	_fill_bkg_rect_PARM_5
    00000068 A9 00            [ 2]  250 	lda	#0x00
    0000006A AA               [ 2]  251 	tax
    0000006B 20r00r00         [ 6]  252 	jsr	_fill_bkg_rect
                         0000006E   253 	C$text_scroller.c$73$1_0$113 ==.
                                    254 ;	src/text_scroller.c: 73: DISPLAY_ON;
    0000006E 20r00r00         [ 6]  255 	jsr	_display_on
                         00000071   256 	C$text_scroller.c$75$1_0$113 ==.
                                    257 ;	src/text_scroller.c: 75: printf(" Scrolling %d chars", sizeof(scroller_text) - 1);
    00000071 A9 01            [ 2]  258 	lda	#0x01
    00000073 48               [ 3]  259 	pha
    00000074 A9 68            [ 2]  260 	lda	#0x68
    00000076 48               [ 3]  261 	pha
    00000077 A9s02            [ 2]  262 	lda	#>___str_0
    00000079 48               [ 3]  263 	pha
    0000007A A9rEC            [ 2]  264 	lda	#___str_0
    0000007C 48               [ 3]  265 	pha
    0000007D 20r00r00         [ 6]  266 	jsr	_printf
    00000080 68               [ 4]  267 	pla
    00000081 68               [ 4]  268 	pla
    00000082 68               [ 4]  269 	pla
    00000083 68               [ 4]  270 	pla
                         00000084   271 	C$text_scroller.c$82$1_0$113 ==.
                                    272 ;	src/text_scroller.c: 82: }
    00000084 08               [ 3]  273 	php
    00000085 78               [ 2]  274 	sei
                         00000086   275 	C$text_scroller.c$78$2_0$114 ==.
                                    276 ;	src/text_scroller.c: 78: add_LCD(scanline_isr);
    00000086 A2s00            [ 2]  277 	ldx	#>(_scanline_isr)
    00000088 A9r00            [ 2]  278 	lda	#(_scanline_isr)
    0000008A 20r00r00         [ 6]  279 	jsr	_add_LCD
    0000008D 28               [ 4]  280 	plp
                         0000008E   281 	C$text_scroller.c$89$1_0$113 ==.
                                    282 ;	src/text_scroller.c: 89: HIDE_LEFT_COLUMN;    
    0000008E ADr00r00         [ 4]  283 	lda	_shadow_PPUMASK
    00000091 29 F9            [ 2]  284 	and	#0xf9
    00000093 8Dr00r00         [ 4]  285 	sta	_shadow_PPUMASK
                         00000096   286 	C$text_scroller.c$90$1_0$113 ==.
                                    287 ;	src/text_scroller.c: 90: base = (uint8_t *)((uint16_t)get_bkg_xy_addr(0, SCROLL_POS) & (DEVICE_SCREEN_MAP_ENTRY_SIZE==1?0xffe0:0xffc0));
    00000096 A9 00            [ 2]  288 	lda	#0x00
    00000098 A2 0F            [ 2]  289 	ldx	#0x0f
    0000009A 20r00r00         [ 6]  290 	jsr	_get_bkg_xy_addr
    0000009D 29 E0            [ 2]  291 	and	#0xe0
    0000009F 85*00            [ 3]  292 	sta	*_main_sloc0_1_0
    000000A1 86*01            [ 3]  293 	stx	*(_main_sloc0_1_0 + 1)
    000000A3 8Dr02r00         [ 4]  294 	sta	_base
    000000A6 8Er03r00         [ 4]  295 	stx	(_base + 1)
                         000000A9   296 	C$text_scroller.c$91$1_0$113 ==.
                                    297 ;	src/text_scroller.c: 91: limit = base + (DEVICE_SCREEN_BUFFER_WIDTH * DEVICE_SCREEN_MAP_ENTRY_SIZE);
    000000A9 A6*01            [ 3]  298 	ldx	*(_main_sloc0_1_0 + 1)
    000000AB A5*00            [ 3]  299 	lda	*_main_sloc0_1_0
    000000AD 18               [ 2]  300 	clc
    000000AE 69 20            [ 2]  301 	adc	#0x20
    000000B0 90 01            [ 4]  302 	bcc	00145$
    000000B2 E8               [ 2]  303 	inx
    000000B3                        304 00145$:
    000000B3 8Dr04r00         [ 4]  305 	sta	_limit
    000000B6 8Er05r00         [ 4]  306 	stx	(_limit + 1)
                         000000B9   307 	C$text_scroller.c$93$1_0$113 ==.
                                    308 ;	src/text_scroller.c: 93: scroller_vram_addr = base + ((DEVICE_SCREEN_X_OFFSET + DEVICE_SCREEN_WIDTH) * DEVICE_SCREEN_MAP_ENTRY_SIZE);
    000000B9 8Dr00r00         [ 4]  309 	sta	_scroller_vram_addr
    000000BC 8Er01r00         [ 4]  310 	stx	(_scroller_vram_addr + 1)
                         000000BF   311 	C$text_scroller.c$94$1_0$113 ==.
                                    312 ;	src/text_scroller.c: 94: if (scroller_vram_addr >= limit) scroller_vram_addr = base;
    000000BF ADr00r00         [ 4]  313 	lda	_scroller_vram_addr
    000000C2 38               [ 2]  314 	sec
    000000C3 EDr04r00         [ 4]  315 	sbc	_limit
    000000C6 ADr01r00         [ 4]  316 	lda	(_scroller_vram_addr + 1)
    000000C9 EDr05r00         [ 4]  317 	sbc	(_limit + 1)
    000000CC 90 0A            [ 4]  318 	bcc	00102$
    000000CE A5*01            [ 3]  319 	lda	*(_main_sloc0_1_0 + 1)
    000000D0 8Dr01r00         [ 4]  320 	sta	(_scroller_vram_addr + 1)
    000000D3 A5*00            [ 3]  321 	lda	*_main_sloc0_1_0
    000000D5 8Dr00r00         [ 4]  322 	sta	_scroller_vram_addr
    000000D8                        323 00102$:
                         000000D8   324 	C$text_scroller.c$96$1_0$113 ==.
                                    325 ;	src/text_scroller.c: 96: set_vram_byte(scroller_vram_addr, *scroller_next_char - 0x20);
    000000D8 ADr03r00         [ 4]  326 	lda	_scroller_next_char
    000000DB 85*00            [ 3]  327 	sta	*(DPTR+0)
    000000DD ADr04r00         [ 4]  328 	lda	(_scroller_next_char + 1)
    000000E0 85*01            [ 3]  329 	sta	*(DPTR+1)
    000000E2 A0 00            [ 2]  330 	ldy	#0x00
    000000E4 B1*00            [ 6]  331 	lda	[DPTR],y
    000000E6 38               [ 2]  332 	sec
    000000E7 E9 20            [ 2]  333 	sbc	#0x20
    000000E9 8Dr00r00         [ 4]  334 	sta	_set_vram_byte_PARM_2
    000000EC AEr01r00         [ 4]  335 	ldx	(_scroller_vram_addr + 1)
    000000EF ADr00r00         [ 4]  336 	lda	_scroller_vram_addr
    000000F2 20r00r00         [ 6]  337 	jsr	_set_vram_byte
                         000000F5   338 	C$text_scroller.c$98$1_0$113 ==.
                                    339 ;	src/text_scroller.c: 98: while (1) {
    000000F5                        340 00110$:
                         000000F5   341 	C$text_scroller.c$99$2_0$115 ==.
                                    342 ;	src/text_scroller.c: 99: scroller_x++;
    000000F5 EEr02r00         [ 6]  343 	inc	_scroller_x
                         000000F8   344 	C$text_scroller.c$100$2_0$115 ==.
                                    345 ;	src/text_scroller.c: 100: if ((scroller_x & 0x07) == 0) {
    000000F8 ADr02r00         [ 4]  346 	lda	_scroller_x
    000000FB 29 07            [ 2]  347 	and	#0x07
    000000FD D0 62            [ 4]  348 	bne	00108$
                         000000FF   349 	C$text_scroller.c$102$3_0$116 ==.
                                    350 ;	src/text_scroller.c: 102: scroller_next_char++;
    000000FF EEr03r00         [ 6]  351 	inc	_scroller_next_char
    00000102 D0 03            [ 4]  352 	bne	00148$
    00000104 EEr04r00         [ 6]  353 	inc	(_scroller_next_char + 1)
    00000107                        354 00148$:
                         00000107   355 	C$text_scroller.c$103$3_0$116 ==.
                                    356 ;	src/text_scroller.c: 103: if (*scroller_next_char == 0) scroller_next_char = scroller_text;
    00000107 ADr03r00         [ 4]  357 	lda	_scroller_next_char
    0000010A 85*00            [ 3]  358 	sta	*(DPTR+0)
    0000010C ADr04r00         [ 4]  359 	lda	(_scroller_next_char + 1)
    0000010F 85*01            [ 3]  360 	sta	*(DPTR+1)
    00000111 A0 00            [ 2]  361 	ldy	#0x00
    00000113 B1*00            [ 6]  362 	lda	[DPTR],y
    00000115 D0 0A            [ 4]  363 	bne	00104$
    00000117 A9s01            [ 2]  364 	lda	#>_scroller_text
    00000119 8Dr04r00         [ 4]  365 	sta	(_scroller_next_char + 1)
    0000011C A9r83            [ 2]  366 	lda	#_scroller_text
    0000011E 8Dr03r00         [ 4]  367 	sta	_scroller_next_char
    00000121                        368 00104$:
                         00000121   369 	C$text_scroller.c$106$3_0$116 ==.
                                    370 ;	src/text_scroller.c: 106: scroller_vram_addr += DEVICE_SCREEN_MAP_ENTRY_SIZE;
    00000121 EEr00r00         [ 6]  371 	inc	_scroller_vram_addr
    00000124 D0 03            [ 4]  372 	bne	00151$
    00000126 EEr01r00         [ 6]  373 	inc	(_scroller_vram_addr + 1)
    00000129                        374 00151$:
                         00000129   375 	C$text_scroller.c$107$3_0$116 ==.
                                    376 ;	src/text_scroller.c: 107: if (scroller_vram_addr >= limit) scroller_vram_addr = base;
    00000129 ADr00r00         [ 4]  377 	lda	_scroller_vram_addr
    0000012C 38               [ 2]  378 	sec
    0000012D EDr04r00         [ 4]  379 	sbc	_limit
    00000130 ADr01r00         [ 4]  380 	lda	(_scroller_vram_addr + 1)
    00000133 EDr05r00         [ 4]  381 	sbc	(_limit + 1)
    00000136 90 0C            [ 4]  382 	bcc	00106$
    00000138 ADr03r00         [ 4]  383 	lda	(_base + 1)
    0000013B 8Dr01r00         [ 4]  384 	sta	(_scroller_vram_addr + 1)
    0000013E ADr02r00         [ 4]  385 	lda	_base
    00000141 8Dr00r00         [ 4]  386 	sta	_scroller_vram_addr
    00000144                        387 00106$:
                         00000144   388 	C$text_scroller.c$110$3_0$116 ==.
                                    389 ;	src/text_scroller.c: 110: set_vram_byte(scroller_vram_addr, *scroller_next_char - 0x20);
    00000144 ADr03r00         [ 4]  390 	lda	_scroller_next_char
    00000147 85*00            [ 3]  391 	sta	*(DPTR+0)
    00000149 ADr04r00         [ 4]  392 	lda	(_scroller_next_char + 1)
    0000014C 85*01            [ 3]  393 	sta	*(DPTR+1)
    0000014E A0 00            [ 2]  394 	ldy	#0x00
    00000150 B1*00            [ 6]  395 	lda	[DPTR],y
    00000152 38               [ 2]  396 	sec
    00000153 E9 20            [ 2]  397 	sbc	#0x20
    00000155 8Dr00r00         [ 4]  398 	sta	_set_vram_byte_PARM_2
    00000158 AEr01r00         [ 4]  399 	ldx	(_scroller_vram_addr + 1)
    0000015B ADr00r00         [ 4]  400 	lda	_scroller_vram_addr
    0000015E 20r00r00         [ 6]  401 	jsr	_set_vram_byte
    00000161                        402 00108$:
                                    403 ;	c:\geeky\gbdk-2020\build\gbdk\include\nes\nes.h: 939: bkg_scroll_x = x, bkg_scroll_y = y;
    00000161 A2 00            [ 2]  404 	ldx	#0x00
    00000163 8Er00r00         [ 4]  405 	stx	_bkg_scroll_x
    00000166 8Er00r00         [ 4]  406 	stx	_bkg_scroll_y
                         00000169   407 	C$text_scroller.c$115$2_0$115 ==.
                                    408 ;	src/text_scroller.c: 115: _lcd_scanline = 0;
    00000169 8Er00r00         [ 4]  409 	stx	__lcd_scanline
                         0000016C   410 	C$text_scroller.c$117$2_0$115 ==.
                                    411 ;	src/text_scroller.c: 117: vsync();        
    0000016C 20r00r00         [ 6]  412 	jsr	_vsync
    0000016F 4CrF5r00         [ 3]  413 	jmp	00110$
                         00000172   414 	C$text_scroller.c$119$1_0$113 ==.
                                    415 ;	src/text_scroller.c: 119: }
                         00000172   416 	C$text_scroller.c$119$1_0$113 ==.
                         00000172   417 	XG$main$0$0 ==.
    00000172 60               [ 6]  418 	rts
                                    419 	.area _CODE
                         00000173   420 G$scanline_offsets_tbl$0_0$0 == .
    00000173                        421 _scanline_offsets_tbl:
    00000173 00                     422 	.db #0x00	; 0
    00000174 01                     423 	.db #0x01	; 1
    00000175 02                     424 	.db #0x02	; 2
    00000176 03                     425 	.db #0x03	; 3
    00000177 03                     426 	.db #0x03	; 3
    00000178 02                     427 	.db #0x02	; 2
    00000179 01                     428 	.db #0x01	; 1
    0000017A 00                     429 	.db #0x00	; 0
    0000017B 00                     430 	.db #0x00	; 0
    0000017C 01                     431 	.db #0x01	; 1
    0000017D 02                     432 	.db #0x02	; 2
    0000017E 03                     433 	.db #0x03	; 3
    0000017F 03                     434 	.db #0x03	; 3
    00000180 02                     435 	.db #0x02	; 2
    00000181 01                     436 	.db #0x01	; 1
    00000182 00                     437 	.db #0x00	; 0
                         00000183   438 G$scroller_text$0_0$0 == .
    00000183                        439 _scroller_text:
    00000183 54 68 69 73 20 69 73   440 	.ascii "This is a text scroller demo for GBDK-2020. You can use idea"
             20 61 20 74 65 78 74
             20 73 63 72 6F 6C 6C
             65 72 20 64 65 6D 6F
             20 66 6F 72 20 47 42
             44 4B 2D 32 30 32 30
             2E 20 59 6F 75 20 63
             61 6E 20 75 73 65 20
             69 64 65 61
    000001BF 73 2C 20 74 68 61 74   441 	.ascii "s, that are shown in this demo, to make different parallax e"
             20 61 72 65 20 73 68
             6F 77 6E 20 69 6E 20
             74 68 69 73 20 64 65
             6D 6F 2C 20 74 6F 20
             6D 61 6B 65 20 64 69
             66 66 65 72 65 6E 74
             20 70 61 72 61 6C 6C
             61 78 20 65
    000001FB 66 66 65 63 74 73 2C   442 	.ascii "ffects, scrolling of tilemaps which are larger than 32x32 ti"
             20 73 63 72 6F 6C 6C
             69 6E 67 20 6F 66 20
             74 69 6C 65 6D 61 70
             73 20 77 68 69 63 68
             20 61 72 65 20 6C 61
             72 67 65 72 20 74 68
             61 6E 20 33 32 78 33
             32 20 74 69
    00000237 6C 65 73 20 61 6E 64   443 	.ascii "les and TEXT SCROLLERS, of course! Need to write something e"
             20 54 45 58 54 20 53
             43 52 4F 4C 4C 45 52
             53 2C 20 6F 66 20 63
             6F 75 72 73 65 21 20
             4E 65 65 64 20 74 6F
             20 77 72 69 74 65 20
             73 6F 6D 65 74 68 69
             6E 67 20 65
    00000273 6C 73 65 20 74 6F 20   444 	.ascii "lse to make this text longer than 256 characters. The quick "
             6D 61 6B 65 20 74 68
             69 73 20 74 65 78 74
             20 6C 6F 6E 67 65 72
             20 74 68 61 6E 20 32
             35 36 20 63 68 61 72
             61 63 74 65 72 73 2E
             20 54 68 65 20 71 75
             69 63 6B 20
    000002AF 72 65 64 20 66 6F 78   445 	.ascii "red fox jumps over the lazy brown dog. 0123456789.          "
             20 6A 75 6D 70 73 20
             6F 76 65 72 20 74 68
             65 20 6C 61 7A 79 20
             62 72 6F 77 6E 20 64
             6F 67 2E 20 30 31 32
             33 34 35 36 37 38 39
             2E 20 20 20 20 20 20
             20 20 20 20
    000002EB 00                     446 	.db 0x00
                         000002EC   447 Ftext_scroller$__str_0$0_0$0 == .
    000002EC                        448 ___str_0:
    000002EC 20 53 63 72 6F 6C 6C   449 	.ascii " Scrolling %d chars"
             69 6E 67 20 25 64 20
             63 68 61 72 73
    000002FF 00                     450 	.db 0x00
                                    451 	.area _XINIT
                         00000000   452 Ftext_scroller$__xinit_scanline_offsets$0_0$0 == .
    00000000                        453 __xinit__scanline_offsets:
    00000000r73r01                  454 	.dw _scanline_offsets_tbl
                         00000002   455 Ftext_scroller$__xinit_scroller_x$0_0$0 == .
    00000002                        456 __xinit__scroller_x:
    00000002 00                     457 	.db #0x00	; 0
                         00000003   458 Ftext_scroller$__xinit_scroller_next_char$0_0$0 == .
    00000003                        459 __xinit__scroller_next_char:
    00000003r83r01                  460 	.dw _scroller_text
                                    461 	.area _CABS    (ABS)
